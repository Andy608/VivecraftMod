--- a/net/minecraft/client/main/Main.java
+++ b/net/minecraft/client/main/Main.java
@@ -40,7 +40,10 @@
 public class Main
 {
     static final Logger LOGGER = LogManager.getLogger();
-
+    public static boolean kiosk;
+    public static boolean viewonly;
+    public static boolean katvr;
+    public static boolean infinadeck;
     @DontObfuscate
     public static void main(String[] p_129642_)
     {
@@ -50,6 +53,11 @@
         optionparser.accepts("demo");
         optionparser.accepts("disableMultiplayer");
         optionparser.accepts("disableChat");
+        optionparser.accepts("demo");
+        optionparser.accepts("kiosk");
+        optionparser.accepts("viewonly");
+        optionparser.accepts("katvr");
+        optionparser.accepts("infinadeck");
         optionparser.accepts("fullscreen");
         optionparser.accepts("checkGlErrors");
         OptionSpec<String> optionspec = optionparser.accepts("server").withRequiredArg();
@@ -65,8 +73,8 @@
         OptionSpec<String> optionspec10 = optionparser.accepts("uuid").withRequiredArg();
         OptionSpec<String> optionspec11 = optionparser.accepts("accessToken").withRequiredArg().required();
         OptionSpec<String> optionspec12 = optionparser.accepts("version").withRequiredArg().required();
-        OptionSpec<Integer> optionspec13 = optionparser.accepts("width").withRequiredArg().ofType(Integer.class).defaultsTo(854);
-        OptionSpec<Integer> optionspec14 = optionparser.accepts("height").withRequiredArg().ofType(Integer.class).defaultsTo(480);
+        OptionSpec<Integer> optionspec13 = optionparser.accepts("width").withRequiredArg().ofType(Integer.class).defaultsTo(1280);
+        OptionSpec<Integer> optionspec14 = optionparser.accepts("height").withRequiredArg().ofType(Integer.class).defaultsTo(720);
         OptionSpec<Integer> optionspec15 = optionparser.accepts("fullscreenWidth").withRequiredArg().ofType(Integer.class);
         OptionSpec<Integer> optionspec16 = optionparser.accepts("fullscreenHeight").withRequiredArg().ofType(Integer.class);
         OptionSpec<String> optionspec17 = optionparser.accepts("userProperties").withRequiredArg().defaultsTo("{}");
@@ -117,6 +125,25 @@
         OptionalInt optionalint1 = ofNullable(parseArgument(optionset, optionspec16));
         boolean flag = optionset.has("fullscreen");
         boolean flag1 = optionset.has("demo");
+        kiosk = optionset.has("kiosk");
+
+        if (kiosk)
+        {
+            System.out.println("Setting kiosk");
+        }
+
+        if (kiosk)
+        {
+            viewonly = optionset.has("viewonly");
+
+            if (viewonly)
+            {
+                System.out.println("Setting viewonly");
+            }
+        }
+
+        katvr = optionset.has("katvr");
+        infinadeck = optionset.has("infinadeck");
         boolean flag2 = optionset.has("disableMultiplayer");
         boolean flag3 = optionset.has("disableChat");
         String s3 = parseArgument(optionset, optionspec12);
@@ -174,6 +201,7 @@
         }
         catch (Throwable throwable1)
         {
+            LOGGER.warn("Failed to something: ", throwable1);
             CrashReport crashreport = CrashReport.forThrowable(throwable1, "Initializing game");
             crashreport.addCategory("Initialization");
             Minecraft.fillReport((Minecraft)null, (LanguageManager)null, gameconfig.game.launchVersion, (Options)null, crashreport);
@@ -232,9 +260,9 @@
                 thread1.join();
             }
         }
-        catch (InterruptedException interruptedexception)
+        catch (InterruptedException interruptedexception1)
         {
-            LOGGER.error("Exception during client thread shutdown", (Throwable)interruptedexception);
+            LOGGER.error("Exception during client thread shutdown", (Throwable)interruptedexception1);
         }
         finally
         {
@@ -275,9 +303,4 @@
     {
         return pStr != null && !pStr.isEmpty();
     }
-
-    static
-    {
-        System.setProperty("java.awt.headless", "true");
-    }
 }
