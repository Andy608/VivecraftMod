--- a/net/minecraft/client/renderer/entity/ItemRenderer.java
+++ b/net/minecraft/client/renderer/entity/ItemRenderer.java
@@ -17,6 +17,11 @@
 import java.util.Random;
 import java.util.Set;
 import javax.annotation.Nullable;
+
+import org.vivecraft.gameplay.trackers.SwingTracker;
+import org.vivecraft.gameplay.trackers.TelescopeTracker;
+import org.vivecraft.render.SpecialItemRenderer;
+
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -67,6 +72,7 @@
 import net.optifine.EmissiveTextures;
 import net.optifine.reflect.Reflector;
 import net.optifine.reflect.ReflectorForge;
+import net.optifine.render.GlAlphaState;
 import net.optifine.render.VertexBuilderWrapper;
 import net.optifine.shaders.Shaders;
 
@@ -86,6 +92,11 @@
     private final BlockEntityWithoutLevelRenderer blockEntityRenderer;
     public ModelManager modelManager = null;
     private static boolean renderItemGui = false;
+    public static boolean ismainhand = false;
+    public static boolean isfphand = false;
+    float fade = 1.0F;
+    float manualFade = 1.0F;
+    private GlAlphaState alphaState = new GlAlphaState();
 
     public ItemRenderer(TextureManager p_174225_, ModelManager p_174226_, ItemColors p_174227_, BlockEntityWithoutLevelRenderer p_174228_)
     {
@@ -168,6 +179,16 @@
             }
 
             pMatrixStack.translate(-0.5D, -0.5D, -0.5D);
+            LocalPlayer localplayer = Minecraft.getInstance().player;
+
+            if (localplayer != null && isfphand)
+            {
+                this.fade = SwingTracker.getItemFade(localplayer, pItemStack);
+            }
+            else
+            {
+                this.fade = this.manualFade;
+            }
 
             if (!pModel.isCustomRenderer() && (!pItemStack.is(Items.TRIDENT) || flag))
             {
@@ -190,6 +211,12 @@
                 else
                 {
                     RenderType rendertype = ItemBlockRenderTypes.getRenderType(pItemStack, flag1);
+
+                    if (isfphand && this.fade < 1.0F)
+                    {
+                        rendertype = Sheets.translucentCullBlockSheet();
+                    }
+
                     VertexConsumer vertexconsumer;
 
                     if (pItemStack.is(Items.COMPASS) && pItemStack.hasFoil())
@@ -361,6 +388,19 @@
                 }
             }
 
+            if (Minecraft.getInstance().jumpTracker.isBoots(pItemStack))
+            {
+                k = this.makeColor(1, 0, 255, 0);
+            }
+            else if (Minecraft.getInstance().climbTracker.isClaws(pItemStack))
+            {
+                k = this.makeColor(1, 130, 0, 75);
+            }
+            else if (TelescopeTracker.isLegacyTelescope(pItemStack))
+            {
+                k = this.makeColor(1, 190, 110, 135);
+            }
+
             float f = (float)(k >> 16 & 255) / 255.0F;
             float f1 = (float)(k >> 8 & 255) / 255.0F;
             float f2 = (float)(k & 255) / 255.0F;
@@ -371,7 +411,7 @@
             }
             else
             {
-                pBuffer.putBulkData(posestack$pose, bakedquad, f, f1, f2, pCombinedLight, pCombinedOverlay);
+                SpecialItemRenderer.addQuad(pBuffer, posestack$pose, bakedquad, f, f1, f2, this.fade, pCombinedLight, pCombinedOverlay);
             }
         }
     }
@@ -432,6 +472,10 @@
         RenderSystem.enableBlend();
         RenderSystem.blendFunc(GlStateManager.SourceFactor.SRC_ALPHA, GlStateManager.DestFactor.ONE_MINUS_SRC_ALPHA);
         RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
+        //Vivecraft.. wut
+        GlStateManager.getAlphaState(this.alphaState);
+        GlStateManager.enableAlphaTest();
+        //
         PoseStack posestack = RenderSystem.getModelViewStack();
         posestack.pushPose();
         posestack.translate((double)pX, (double)pY, (double)(100.0F + this.blitOffset));
@@ -636,4 +680,24 @@
     {
         return VanillaResourceType.MODELS;
     }
+
+    private int makeColor(int a, int r, int g, int b)
+    {
+        return a << 24 | r << 16 | g << 8 | b;
+    }
+
+    public float getCurrentFade()
+    {
+        return this.fade;
+    }
+
+    public float getFade()
+    {
+        return this.manualFade;
+    }
+
+    public void setFade(float fade)
+    {
+        this.manualFade = fade;
+    }
 }
