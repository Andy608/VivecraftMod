--- a/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/net/minecraft/world/item/crafting/RecipeManager.java
@@ -22,6 +22,7 @@
 import net.minecraft.Util;
 import net.minecraft.core.NonNullList;
 import net.minecraft.core.Registry;
+import net.minecraft.network.chat.TranslatableComponent;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.packs.resources.ResourceManager;
 import net.minecraft.server.packs.resources.SimpleJsonResourceReloadListener;
@@ -29,7 +30,10 @@
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.Container;
 import net.minecraft.world.item.ItemStack;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Blocks;
+import net.optifine.reflect.Reflector;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -68,6 +72,25 @@
             }
         }
 
+        //VIVECRAFT - This prolly cant stay here. Move to .json files someday.
+        ItemStack is = new ItemStack(Items.LEATHER_BOOTS);
+        is.setHoverName(new TranslatableComponent("vivecraft.item.jumpboots"));
+        is.getOrCreateTag().putBoolean("Unbreakable", true);
+        is.getOrCreateTag().putInt("HideFlags",4);
+
+        ItemStack is2 = new ItemStack(Items.SHEARS);
+        is2.setHoverName(new TranslatableComponent("vivecraft.item.climbclaws"));
+        is2.getOrCreateTag().putBoolean("Unbreakable", true);
+        is2.getOrCreateTag().putInt("HideFlags",4);
+
+        ShapedRecipe boot = new ShapedRecipe(new ResourceLocation("jumpboots"),"Vivecraft", 1, 2, NonNullList.m_122783_(Ingredient.EMPTY,Ingredient.m_43929_(Items.LEATHER_BOOTS), Ingredient.m_43927_(new ItemStack(Blocks.SLIME_BLOCK))), is);
+        ShapedRecipe claw = new ShapedRecipe(new ResourceLocation("climbclaws"),"Vivecraft", 3, 2, NonNullList.m_122783_(Ingredient.EMPTY,Ingredient.m_43929_(Items.SPIDER_EYE),Ingredient.EMPTY,Ingredient.m_43929_(Items.SPIDER_EYE),Ingredient.m_43929_(Items.SHEARS),Ingredient.EMPTY,Ingredient.m_43929_(Items.SHEARS)), is2);
+
+        if (map.containsKey(boot.getType())) {
+            map.get(boot.getType()).put(boot.getId(), boot);
+            map.get(claw.getType()).put(claw.getId(), claw);
+        }
+
         this.recipes = map.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (p_44033_) ->
         {
             return p_44033_.getValue().build();
@@ -135,25 +158,25 @@
 
     public Optional <? extends Recipe<? >> byKey(ResourceLocation pRecipeId)
     {
-        return this.recipes.values().stream().map((p_44050_) ->
+        return this.recipes.values().stream().map((recipeMap) ->
         {
-            return p_44050_.get(pRecipeId);
+            return recipeMap.get(pRecipeId);
         }).filter(Objects::nonNull).findFirst();
     }
 
     public Collection < Recipe<? >> getRecipes()
     {
-        return this.recipes.values().stream().flatMap((p_44066_) ->
+        return this.recipes.values().stream().flatMap((recipeMap) ->
         {
-            return p_44066_.values().stream();
+            return recipeMap.values().stream();
         }).collect(Collectors.toSet());
     }
 
     public Stream<ResourceLocation> getRecipeIds()
     {
-        return this.recipes.values().stream().flatMap((p_44035_) ->
+        return this.recipes.values().stream().flatMap((recipeMap) ->
         {
-            return p_44035_.keySet().stream();
+            return recipeMap.keySet().stream();
         });
     }
 
