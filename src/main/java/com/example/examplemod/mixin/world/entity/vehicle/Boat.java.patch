--- a/net/minecraft/world/entity/vehicle/Boat.java
+++ b/net/minecraft/world/entity/vehicle/Boat.java
@@ -4,6 +4,7 @@
 import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.BlockUtil;
+import net.minecraft.client.Minecraft;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.particles.ParticleTypes;
@@ -47,6 +48,7 @@
 import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import net.optifine.reflect.Reflector;
 
 public class Boat extends Entity
 {
@@ -600,7 +602,15 @@
 
                             if (!(blockstate.getBlock() instanceof WaterlilyBlock) && Shapes.joinIsNotEmpty(blockstate.getCollisionShape(this.level, blockpos$mutableblockpos).move((double)l1, (double)k2, (double)i2), voxelshape, BooleanOp.AND))
                             {
-                                f += blockstate.getBlock().getFriction();
+                                if (Reflector.IForgeBlockState_getSlipperiness.exists())
+                                {
+                                    f += Reflector.callFloat(blockstate, Reflector.IForgeBlockState_getSlipperiness, this.level, blockpos$mutableblockpos, this);
+                                }
+                                else
+                                {
+                                    f += blockstate.getBlock().getFriction();
+                                }
+
                                 ++k1;
                             }
                         }
@@ -749,15 +759,17 @@
         if (this.isVehicle())
         {
             float f = 0.0F;
+            Minecraft minecraft = Minecraft.getInstance();
+            float f1 = minecraft.player.input.leftImpulse;
 
             if (this.inputLeft)
             {
-                --this.deltaRotation;
+                this.deltaRotation -= f1;
             }
 
             if (this.inputRight)
             {
-                ++this.deltaRotation;
+                this.deltaRotation -= f1;
             }
 
             if (this.inputRight != this.inputLeft && !this.inputUp && !this.inputDown)
@@ -1055,6 +1067,17 @@
         return new ItemStack(this.getDropItem());
     }
 
+    protected void addPassenger(Entity pPassenger)
+    {
+        super.addPassenger(pPassenger);
+
+        if (this.isControlledByLocalInstance() && this.lerpSteps > 0)
+        {
+            this.lerpSteps = 0;
+            this.absMoveTo(this.lerpX, this.lerpY, this.lerpZ, (float)this.lerpYRot, (float)this.lerpXRot);
+        }
+    }
+
     public static enum Status
     {
         IN_WATER,
