--- a/com/mojang/blaze3d/audio/Library.java
+++ b/com/mojang/blaze3d/audio/Library.java
@@ -1,19 +1,26 @@
 package com.mojang.blaze3d.audio;
 
 import com.google.common.collect.Sets;
+import java.nio.Buffer;
 import java.nio.ByteBuffer;
 import java.nio.IntBuffer;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Objects;
 import java.util.Set;
 import javax.annotation.Nullable;
+import net.minecraft.client.Minecraft;
 import net.minecraft.util.Mth;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.lwjgl.BufferUtils;
 import org.lwjgl.openal.AL;
 import org.lwjgl.openal.AL10;
 import org.lwjgl.openal.ALC;
 import org.lwjgl.openal.ALC10;
 import org.lwjgl.openal.ALCCapabilities;
 import org.lwjgl.openal.ALCapabilities;
+import org.lwjgl.openal.SOFTHRTF;
 import org.lwjgl.system.MemoryStack;
 
 public class Library
@@ -49,6 +56,7 @@
     private Library.ChannelPool staticChannels = EMPTY;
     private Library.ChannelPool streamingChannels = EMPTY;
     private final Listener listener = new Listener();
+    public static List<String> hrtfList = new ArrayList<>();
 
     public void init()
     {
@@ -74,6 +82,103 @@
             this.streamingChannels = new Library.CountingChannelPool(j);
             ALCapabilities alcapabilities = AL.createCapabilities(alccapabilities);
             OpenAlUtil.checkALError("Initialization");
+            hrtfList.clear();
+
+            if (alccapabilities.ALC_SOFT_HRTF)
+            {
+                int l = ALC10.alcGetInteger(this.device, 6548);
+
+                if (l > 0)
+                {
+                    LOGGER.info("Available HRTFs:");
+
+                    for (int i1 = 0; i1 < l; ++i1)
+                    {
+                        String s = Objects.requireNonNull(SOFTHRTF.alcGetStringiSOFT(this.device, 6549, i1));
+                        hrtfList.add(s);
+                        LOGGER.info("{}: {}", i1, s);
+                    }
+
+                    int k1 = Minecraft.getInstance().vrSettings.hrtfSelection;
+                    int l1;
+
+                    if (k1 == -1)
+                    {
+                        l1 = 0;
+                    }
+                    else
+                    {
+                        l1 = 1;
+                    }
+
+                    IntBuffer intbuffer = BufferUtils.createIntBuffer(10).put(6546).put(l1);
+
+                    if (k1 != -1)
+                    {
+                        if (k1 > 0 && k1 <= hrtfList.size())
+                        {
+                            LOGGER.info("Using HRTF: {}", hrtfList.get(k1 - 1));
+                            intbuffer.put(6550).put(k1 - 1);
+                        }
+                        else
+                        {
+                            if (k1 > hrtfList.size())
+                            {
+                                LOGGER.warn("Invalid HRTF index: {}", (int)k1);
+                            }
+
+                            LOGGER.info("Using default HRTF");
+                        }
+                    }
+                    else
+                    {
+                        LOGGER.info("Disabling HRTF");
+                    }
+
+                    ((Buffer)intbuffer.put(0)).flip();
+                    SOFTHRTF.alcResetDeviceSOFT(this.device, intbuffer);
+
+                    if (!OpenAlUtil.checkALError("HRTF initialization"))
+                    {
+                        LOGGER.info("HRTF initialized.");
+                        int j1 = ALC10.alcGetInteger(this.device, 6547);
+
+                        switch (j1)
+                        {
+                            case 0:
+                                LOGGER.info("HRTF status: disabled");
+                                break;
+
+                            case 1:
+                                LOGGER.info("HRTF status: enabled");
+                                break;
+
+                            case 2:
+                                LOGGER.info("HRTF status: denied");
+                                break;
+
+                            case 3:
+                                LOGGER.info("HRTF status: required");
+                                break;
+
+                            case 4:
+                                LOGGER.info("HRTF status: headphones detected");
+                                break;
+
+                            case 5:
+                                LOGGER.info("HRTF status: unsupported format");
+                        }
+                    }
+                }
+                else
+                {
+                    LOGGER.warn("No HRTFs found.");
+                }
+            }
+            else
+            {
+                LOGGER.warn("ALC_SOFT_HRTF is not supported.");
+            }
 
             if (!alcapabilities.AL_EXT_source_distance_model)
             {
